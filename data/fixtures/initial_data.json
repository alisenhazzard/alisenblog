[{"pk": "game_development", "model": "vasir_blog.category", "fields": {"name": "Game Development", "description": "Topics related to video game development and game design"}}, {"pk": "mootools", "model": "vasir_blog.category", "fields": {"name": "MooTools", "description": "Posts about the open source Javascript framework MooTools"}}, {"pk": "openlayers", "model": "vasir_blog.category", "fields": {"name": "OpenLayers", "description": "Posts about the opensource web mapping framework OpenLayers"}}, {"pk": "ubuntu", "model": "vasir_blog.category", "fields": {"name": "Ubuntu / Linux", "description": "Posts involving my favorite operating system Ubuntu and / or Linux in general"}}, {"pk": "misc", "model": "vasir_blog.category", "fields": {"name": "Miscellaneous", "description": "General posts"}}, {"pk": "my_openlayers_book", "model": "vasir_blog.category", "fields": {"name": "My OpenLayers Book", "description": "Corrections, code excerpts, and continuations of my openlayers book - OpenLayers 3.0 - A Beginner's Guide and Reference"}}, {"pk": "openlayers_tutorial", "model": "vasir_blog.tag", "fields": {"name": "OpenLayers Tutorial", "description": "Posts from the OpenLayers tutorial"}}, {"pk": "javascript-browser-based-tower-defense-game", "model": "vasir_blog.post", "fields": {"category": "game_development", "content": "My latest project is an Browser Based Tower Defense (Elemental TD) game written in Javascript using the <a href='http://motools.net' rel='nofollow' title='MooTools Library'>MooTools framework</a> on the client end.  The thing that sort of sets it apart from other browser games is that it is a true browser based tower defense: it does not use flash; it's all javascript / css / html (with many calls to the server to validate the game state and ensure cheating does not happen). The server side of things will likely be done in either Node.JS or Python (right now, it's coded in python using Django).  The idea is fairly similar to every other TD game out there, although this one is done completely in the browser - so you can play from anywhere.  The idea behind the game is not too unique - a typical tower d game, using elements that have unique effects.  The difference, however, is that what I'm really trying to do is develop more of a framework for others to use and create tower defense games.\r\n<br />\r\nIn theory, 'End of Ages Elemental Tower Defense' will not be a single tower defense game, but more of a community where people can make maps, towers, creeps, gameplay rules, etc. using this browser based framework.  Eventually, the goal is to have it playable on Facebook, so you can create a game using a map that you (or someone else) creates and play tower defense with them.\r\n\r\n<br /><br />\r\n<h2>Current State of End of Ages Elemental Tower Defense</h2>\r\nSo, what exactly am I doing?  Well, I'm trying at the moment to get a basic elemental tower defense game created.  There are the four elements along with light and dark, each element has a unique ability (dark has damage over time on hit, fire has splash damage, wind has stun, etc).  The creeps will function like in any other tower D game, getting increasingly harder as the next waves comes.  The towers can be upgraded, but you have full control over what exactly you upgrade - you can upgrade the base Damage, Delay, Range, and elemental values for each tower.  There is no preset limit of upgrades, so you have a lot more fine grain control of what you upgrade and the different dynamics that towers of different elements create.  \r\n<br />\r\nSo far, nothing unique really.  Now, the next step I want to take is to allow multiple people to connect to the game you're in and build towers along with you.  The more people playing, ideally, the harder the creeps get. \r\n<br />  \r\nThe idea though is to build all this up and allow people to create maps and tower types through using this framework.  \r\n<br />\r\nThere will also be a gameplay mode where you can have a defending team (tower builders) and an offense team (creep builders).  The creep builders will receive money based on how far their creeps get and they will be able to upgrade creep health / armor / speed / elements / etc. with money.  The goal of the summoners will be to make creeps reach the end point, and the defenders have to stop them.  The alternative mode is just defenders vs. computer creep summoner.  The computer will summon creeps that will be either automatically generated or predefined by the map maker.  \r\n\r\n<br /><br />\r\n<h2>State of the game</h2>\r\nThe fundamentals of the game are, for the most part, completed.  I am at the point in the tower defense game where you can build towers, send individual creeps, and upgrade damage / delay / range / and the fire, light, and wind elementals for each tower.  It's very rough and under heavy development; I wouldn't even consider it in its alpha stage yet.  The interface is ugly and does not function properly, but once I spend some time with it I will posting the URL to the dev version.\r\n\r\n<br /><br />\r\n<h2>Roadmap</h2>\r\nThere is much left to be done.  The game will require constant communication with the server, but the server side of things has yet to be developed.  I am considering a variety of different approached, but will likely end up using Node.js and couchdb for the game itself and django to handle the website.  The other three elements (dark / earth / water) need to be implemented, and then the creep editor needs to be in place.  \r\n<br />\r\nAfter that, balancing and other gameplay issues will be tackled, and finally the server side code will be developed.  In theory, the server side of the game should not be very difficult to write as it will be similar to the client, but just accept requests from multiple clients and update the game state.  Then, it will be rolled out on facebook and a website to track player stats will be created . In my next post I will go further in depth about the game and provide a link to test it out.", "description": "My latest project is an Browser Based Tower Defense (Elemental TD) game written in Javascript using the MooTools framework on the client end. The thing that sort of sets it apart from other browser games is that it is a true browser based tower defense: it does not use flash or other third party plugins; it\u2019s all Javascript.", "title": "Javascript Browser Based Tower Defense Game: Elemental TD", "num_views": null, "tags": [], "post_date": "2010-11-06 13:14:09", "post_last_edit_date": null, "related_image": ""}}, {"pk": "removing-m-characters-on-ubuntu-in-vim", "model": "vasir_blog.post", "fields": {"category": "ubuntu", "content": "It took me a while to figure out how to get rid of pesky ^M characters in VIM on ubuntu. ^M in VIM can be manipulated as it is an \\r character. Often times other developers would edit python files in gedit or notepad and ^M characters would be inserted. I could not simply %s/\\^M//g as \u201c^M\u201d was not a recognized character. \r\n<br /><br />\r\nThe fix is really quite simple and I was frustrated it took me so long to find, but in case it gets to anyone else \u2013 the ^M is a line feed character that is inserted by gedit(among other editors) sometimes. In VIM, it shows up as ^M, but it is actually a \u201c\\r\u201d character. So, doing a replace for \\r characters will remove the ^M\r\n\r\n<br /><br />\r\n<pre>\r\n%s/\\r//g\r\n</pre>", "description": "Remove ^M characters in VIM by replacing \\r with nothing. ^M is really \\r. Use :%s/\\r//g", "title": "Removing ^M characters on ubuntu in VIM", "num_views": null, "tags": [], "post_date": "2010-11-06 13:16:14", "post_last_edit_date": null, "related_image": ""}}, {"pk": "mootools-1-2-beginners-guide-review", "model": "vasir_blog.post", "fields": {"category": "mootools", "content": "<strong>MooTools 1.2 Beginner's Guide</strong>, authored by <strong>Jacob Gube</strong> (of Six Revisions) and <strong>Garrick Cheung</strong> (a MooTools Community team member with an impressive work resume) and published by <strong>Packt Publishing</strong> on December 2009, is a book aimed at, as the title suggests, new comers to the MooTools library.  The book aims to provide a solid foundation for MooTools new comers, and assumes a limited knowledge of Javascript, HTML, and CSS.  This book aims at not just at providing a laundry list of MooTool function definitions, but at providing a complete coverage of how MooTools geared towards a beginner.\r\n\r\n<br /><br />\r\n<h2>Overall Assessment: 5/5</h2>\r\nThis book rocks.  This is a superb book and excellent resource not just to learn MooTools, but the authors also succeed in installing some pretty important general programming concepts.  The authors far exceeded my expectations for this title, and although I have been using MooTools fairly regularly for almost two years, I too picked up a few things.  This is truly a great foundational type of book, not just for MooTools but for web development in general.  This book, I believe, has done something I feel is very much needed for MooTools to really take off even more than it has - it has made the framework very approachable and attractive to people not just trying to decide what JS framework to use, but also to those people who aren't even sure what a framework is.\r\n\r\n<br /><br />\r\n<h4>Writing Style</h4>\r\nThe overall writing style was fluid and lucid, along with some actual good humor intermixed.  Though geared at beginners, the tone was never condescending; not once did I feel like the author was 'talking down' to the reader.  It truly is an easy to follow book that even a novice in Javascript could follow with ease.  The book is chock full of code samples, all explained line by line, and there are often many screenshots that accompany code to show what exactly the code is doing.  As far as errors go, I came across no writing errors, kudos to the reviewer / editor, and only one minor code error.\r\n\r\n<br /><br />\r\n<h4>Required knowledge</h4>\r\nThe authors state that some basic JS / HTML / CSS knowledge is assumed, but they do an excellent job on not relying on that assumed knowledge; all concepts are thoroughly explained and I feel that anyone who is interested would be able to pick up and follow the book, even with little to nill CSS / HTML experience.\r\n<br />\r\n\r\nThe book advertises an emphasis on 'doing' and less of a focus on theory - something that the authors deliver, providing extensively detailed comments, explanations, and screenshots for pretty much every topic discussed.  I believe the authors successfully walked the line of theory / application, providing just enough theory to explain most topics but not enough to bog a beginner down.  And the code samples / exercises are fantastic.  Early on, the Fx class is introduced and I feel as if it would really hook readers into the book - I certainly appreciated it.\r\n<br />\r\n\r\nI've had a difficult time finding great books (not just MooTools, but most subjects) aimed at beginners  - too many books assume knowledge that beginners might not have, other books dumb down the content too much that it's hard to pull anything useful from it.   This book is one of those rare cases where everything just fits.  I feel that if I were a beginner to MooTools again, this book would have been perfect and would have saved me months of figuring things out by myself.  With my current knowledge level, it was at the least a very great refresher and I learned quite a few things from it; a great way to fill in any gaps of knowledge I may have had from teaching myself.\r\n\r\n<br /><br />\r\n<h4>Coverage of MooTools and Programming Concepts</h4>\r\nI'll repeat myself here and say how impressed I was how the authors don't just teach MooTools, they also teach good programming habits.  The easy route to take would have been just to describe how MooTools work, but this book does not stop there.  Early on, the authors focus heavily on Javascript obfuscation; decoupling JavaScript embedded in HTML elements.  Higher level programming concepts are just not explained, but reinforced throughout the book \u2013 be it through the clean code examples, mentioning it multiple times, or including it in \u2018tip boxes\u2019 (such as why using single quotes instead of double quotes is typically preferred).\r\n<br />\r\n\r\nObject Oriented Programming is explained very well.   AJAX, while MooTools implements it, is also given thorough coverage.   All these 'extra' concepts that aren't strictly MooTools are handled beautifully; the authors clearly know what they were doing when writing this book.\r\n<br />\r\n\r\nAs mentioned earlier, it's often hard to find a beginner book for a topic that doesn't require tons of knowledge of other topics.  With this book, however, someone who is not just a MooTools novice, but also a novice to web development and has maybe only heard of MooTools could pick this book up and get an excellent overview of the entire Javascript / HTML / CSS / Landscape.\r\n\r\n<br /><br />\r\n<h2>Book Structure</h2>\r\nThe book is divided into chapters which each cover a particular area.  Each chapter is broken down in a general structure similar to\r\n<ul>\r\n\t<li>Theory</li>\r\n\t<li>Examples (Time for Action)</li>\r\n\t<li>Example explanation (What just happened)</li>\r\n\t<li>Occasionally a self test or pop quiz</li>\r\n        <li>Repeat</li>\r\n</ul>\r\n<br />\r\n\r\nI was very pleased how the authors broke down each chapter.  The theory sections explain what is going on behind the scenes (but not too complex), and then immediately examples are given which can easily be followed along with.\r\n<br />\r\n\r\nThe code examples are thoroughly discussed line by line, I never felt as if anything was ambiguous or unexplained.    After the example code, a section describing what happened (from more of a general point of view often) is given, wrapping up the example and ensuring nothing is left unexplained.\r\n<br />\r\n\r\nThe occasional self test or pop quiz help to reinforce that the reader understood what happened, and the tests and quizzes are very simple \u2013 they usually just involve changing a function call or recalling some information discussed previously.\r\n<br />\r\n\r\nI do have a major gripe here though, and it\u2019s that the pop quizzes provide answers immediately by bolding the correct answer.  By providing the answer within the question, it doesn\u2019t give the reader any time to arrive at the correct answer themselves, as they already know it; even if they try to suppress the fact they know the right answer, the satisfaction of figuring it out is taken away to some extent.  There are not many pop quizzes, and because of the way the rest of the book is written, I can\u2019t justify not giving the overall book a 5 star rating.  This is  a minor issue, albeit fairly important since the book\u2019s audience is beginners, and I think books like this would benefit from having the answers provided after the questions are asked, and not immediately visible when asked.\r\n<br />\r\nMany chapters also have multiple theory / code examples, but the general structure of theory -&gt; code / line by line analysis -&gt; post code breakdown is followed pretty consistently by the authors throughout the book.\r\n\r\n<br /><br />\r\n<h3>Content Format</h3>\r\nCode is cleared typefaced, and relevant lines of code that are to be discussed are bolded.  I do have a minor gripe that there are a couple of places where the code does not properly line up, but those cases are few and far between.\r\n<br />\r\n\r\nNew terms and important words that appear in non-code text are also bolded.  There are also \u201cNotes\u201d and \u201cTips / Tricks\u201d boxes which appear as boxes outside of text, used to direct attention to things related to the topics being discussed.\r\n<br /><br />\r\n\r\n<h2>Chapter Analysis</h2>\r\n<h3>Chapter 1- MooTools and Me</h3>\r\nThis chapter covered what MooTools is and why it\u2019s such a great framework, setting up MooTools on the reader\u2019s system, and diving into a bit of code.\r\n<br />\r\n\r\nThe introductory paragraph provides a great overview of the current web landscape and JavaScript\u2019s place in it.  MooTools is described convincingly and I like how within the first two pages already code is being provided.\r\n<br />\r\n\r\nThe term \u2018AJAX\u2019 is tossed around frequently, but justifiably so.  I appreciate the emphasis on it and the code that samples how MooTools makes creating a request much easier.  The DOM (Document Object Model) is mentioned, but there exists no description for it, which might confuse complete newcomers.\r\n<br />\r\n\r\nThe authors go from providing a step by step guide to settings up MooTools to immediately jumping into some code.  I like this approach.\r\n<br />\r\n\r\nThe descriptions of MooTools Core and MooTools More are handled well and at the perfect time.   Figuring out this distinction took me a while when I first jumped into MooTools.  The authors do a great job of explaining not just why MooTools is modular, but also what the whole concept of modularity implies and why it is important not to just bundle everything in one big honking file - something that is not necessarily common knowledge among beginning coders (at least it wasn't for me).  This is an example of how the authors do a fantastic job at interweaving essential programming habits and concepts into a book whose goal isn\u2019t to teach these concepts, but whose goal is to teach MooTools \u2013 and they do a great job at teaching both.\r\n<br />\r\n\r\nThe following description of what an API is impressed me even more.  I love how this book really breaks down all these universal coding concepts and makes them easily approachable to a novice getting into MooTools.\r\n<br /><br />\r\n\r\n<h3>Chapter 2 \u2013 Writing Javascript with MooTools</h3>\r\nChapter 2 provided a great introduction to some general theory, discussed the concept of unobtrusive javascript, classes / OOP , chainability in MooTools, and the Fx class.\r\n<br />\r\n\r\nIt begins with a great explanation of why MooTools should be used and the problems it addresses - namely, helping you write better JavaScript code.  Then the authors discuss unobtrusive JavaScript (removing JavaScript functionality from your actual content) using an example of calls to a function that then call alert() once clicked, embedded in anchor (a) elements.  I very much like this example and the way it is explained.  The steps taken to show how to add an eventListener are excellent.  Every line of code that changes is described along with an explanation.  The authors hold the reader's hand through the example, but not in a condescending way or a way that dumbs down the text; I think a complete MooTools beginner would have no time at all grasping the concepts and implementation.\r\n<br />\r\n\r\nThe discussion on unobtrusive javascript is excellent, I am very pleased that they introduced the concept so early on.  It not only teaches people how to use MooTools, but good programming habits, which is just equally (if not more) important.  Another concept they discuss is DRY (Don't Repeat Yourself), they do a good job and make it clear what exactly it is and why it's good practice.\r\n<br />\r\n\r\nA large part of this chapter was dedicated to Object Oriented Programming.  Overall, very great section.  However, the introduction and explanation of what a class is was, I felt, a bit a bit lacking.  Perhaps a brief description of what OOP is and how it differs from functional programming would have been a goot fit here.  I won't complain too much about it though, since a full course on OOP is outside the scope of the book; however, it would have been nice for a bit more thorough definitions.\r\n<br />\r\n\r\nThe authors used an example of a Dog class to walk through the OOP principals. It was handled gracefully and I think it would have communicated to a complete beginner what OOP is.  Defining classes, setting attributes and methods, inheritance, and object instantiation were all covered well and the example code was a great way to demonstrate the concepts - the code worked flawlessly and produced the expected output.\r\n<br />\r\n\r\nMooTools makes it very easy to do object oriented programming.  While I feel there's room for improvement on how the authors introduced the concepts of OOP, the way they explain OOP in MooTools leaves nothing to be desired.  They thoroughly but concisely explain how to set up classes, methods, what the initialize function is doing, etc, etc.  With the level of MooTools knowledge I have (I'm not a developer of MooTools or anything, so there is definitely a lot I need to learn), I felt like they covered how OOP in MooTools worked in a way that was extremely accessible to a beginner without, leaving anything important out.\r\n<br /><br />\r\n\r\n<h3>Chapter 3 - Discussing DOM Elements</h3>\r\nThis chapter covered the concept of the DOM and focused largely on the $() and $$() selectors.\r\n<br />\r\n\r\nIt began with a introduction to what the DOM is.  The description of the DOM is brief, but thorough.  The authors provided a short refresher on CSS, which was nice.  The CSS code the authors write is very clean and done properly.  The advantage of using MooTool's built in selection method is made very clear and I am pleased with how well it is described - not only can you easily selects elements like you could via CSS, but MooTools also supports already supports CSS3 selectors.  This seems in itself a great reason to use the framework for anyone who makes websites, especially web designers.\r\n<br />\r\n\r\nCoverage of both $ and $$ are excellent, along with the tip to use $ over $$ for performance.  The authors also discuss why it is a better habit to use single quotes instead of double quotes, as you won't have to worry about escaping quotes as much.\r\n<br />\r\n\r\nWith MooTools, you pass in only the ID of an element to $(), but you pass in a CSS selector to $$().  This distinction can be confusing at first, but the authors makes the difference clear and thoroughly explain it.\r\n<br />\r\n\r\nPsuedo-selectors are also discussed.  The pseudo-selector ability is very very handy, and I wasn't aware of the full power of it.  It is explained well and the example of Zebra striping a table is clear and easy to follow.  The single to turn all even elements a certain background color is definitely an impressive demo and I think it does a good job at captivating interest (although I was aware of this ability, it is nice to see how eloquent it is, just a single line).\r\n<br /><br />\r\n\r\n<h3>Chapter 4 - The Core's Useful Utility Functions</h3>\r\nThis chapter covered the MooTools Core, first focusing on browser detection, then covering other useful functions such as $time().\r\n<br />\r\n\r\nThere is a heavy emphasis on browser detection early on.  The authors do a fantastic job at explaining how powerful MooTool's built in Browser system is.  The three components, Browser.Feature, Browser.Engine, and Browser.Platform are outlined in the beginning, given a brief description, and then examples are provided showing how to use each component.  They mention xPath, but I would have like more discussion of why it is relevant and what significance it has.\r\n<br />\r\n\r\nThe example for Browser.Engine.name for determining rendering info is great.  The authors also describe Browser.plugin - I was unaware of Browser.plugin to detect for flash presence, very nifty.\r\n<br />\r\n<strong>$time and $clear</strong>\r\n<br />\r\n\r\nThe example using $time was incredible.  It clearly explained another important feature not just about MooTools, but about development in general - testing how long something takes to run.  The example to introduce it was timing how long between an alert being called and the user closing it.  I think this is one of the best ways to introduce the concept of timing processes, and it gives the user direct control over the start / end time, and lets them play around with it and see how that is an analogy to how long a process would take to do something.\r\n<br />\r\n\r\n$clear and $periodical were also great sections, and were explained well through another CSS example of moving a box.\r\n<br />\r\n\r\nThe $extend() example is nice and reinforces the OOP concepts in a clear beginner friendly way\r\n<br />\r\n\r\n$each: The author show why $each is an excellent way to save time instead of writing for loops.  However, it was a bit unclear about the arguments - the action section cleared it up though.  The authors did a good job explaining and show how it could save time through the code example.\r\n<br />\r\n\r\nThe core utility functions are described nicely.  The subtle difference between $chk and $defined are thoroughly explained and clear.  The explanation of how $try worked and how it is used was excellent.  The other utility function explanations were brief, but it was clear how they could be used.\r\n<br />\r\n\r\nExcellent chapter, overall.  The MooTools core provides functionality that many Javascript developers use on a daily basis, and as the MooTools core is, well, the core of MooTools, a book talking about it needs to be thorough.  I felt that the authors did a superb job here and left nothing out.\r\n<br /><br />\r\n\r\n<h3>Chapter 5 - Working With Events</h3>\r\nChapter 5 covered events and how MooTools handles them; specifically - defining events, how to add event listeners, how to create custom events and extent MooTool's event object, how to remove and  fire off events, investigate MooTools events methods and properties\r\n<br />\r\nEvents were always a pain for me, MooTools handles them beautifully, so I had high expectations from this chapter from the start, and it lived up to my expectations.\r\n<br /><br />\r\n<strong>What are events</strong>\r\n<br />\r\nThe authors cover the idea of events.  The introductory section is good, it doesn't bog down the user with details.  In MooTools, when specifying an event (for example, 'click'), the 'on' is removed (the W3C specification is 'onClick').  The authors state you must do this, but I would have liked more of an explanation of why MooTools chose to do this.\r\n<br />\r\nThe authors divide events into five groups - window events, form events, keyboard events, mouse events, MooTools custom events.   This is an excellent grouping and makes it easier to grab a hold of the concepts.\r\n<br />\r\nWindow events are described as events that occur in background.  There is a GREAT comparison of HTML event attribute / MooTools event names and descriptions that clear any confusion. MooTools custom mouse events are covered; mouseenter is very helpful does not fire for children elements.  mouseleave is also very beneficial.\r\n<br />\r\nEvent listeners are briefly described and a great example follows.  The emphasis on code samples is good, and the example of highlighting the current form element is excellent. Attaching CSS classes is a common thing, and another very good example demonstrating its use is provided.\r\n<br /><br />\r\n<strong>Creating custom events</strong>\r\n<br />\r\nI was very pleased with this section.  They walk through the process of creating your own events via an example of detecting caps lock.\r\n<br />\r\nMy only complaint with this section was that the syntax of condition == 0 ? 1 : 0 could be explained more, as it might confuse beginners.\r\n<br />\r\nThis chapter was great, however, it was the only chapter that I found a code error.  On page 137, the authors are describing the stopPropagation() method and say to add a line of code above a previous line, but the line of code to add is never given; the actual use of stopPropgation() is not exemplified.  I don't count this too much against the authors though, because the code example that preceded it was very clear and it would be very easy for a beginner to simply call the function because it is described so well.\r\n<br /><br />\r\n\r\n<h3>Chapter 6 - Brining Web Pages to Life with Animation</h3>\r\nThis chapter covered animation through the Fx class.  It follows the same structure as the previous chapters and all the examples and descriptions were great.  The previous chapters used the Fx class and methods such as tween(), and provided a good introduction, in a sense, to this one.  The function calls should be a bit familiar to the reader already, but a great introduction is provided.\r\n<br />\r\nThe chapter provides excellent examples of using tween(), fade(), and morph().  I really have nothing but positive feedback to give for this chapter.\r\n<br /><br />\r\n\r\n<h3>Chapter 7 - Going 2.0 with AJAX</h3>\r\nChapter 7 discusses MooTool's Request class, how to create Request objects, how to get and send data to servers, and what HTTP are and how to work with them.  Overall, I really enjoyed this chapter.  The discussion on AJAX could have been a bit more thorough, but was sufficient to get the ideas across.  The coverage of MooTool's Request class was excellent.  I was unaware how easily MooTools allows you to handle HTTP headers; something covered real well.\r\n<br />\r\n\r\nJSON was introduced and covered as well; not just how to use JSON, but what JSON is.  Again I was impressed how the authors cover topics that would appear at first to be outside the scope of MooTools, but they do a wonderful job making everything accessible to beginners.  One of the examples the authors use is how to load an HTML document into an element; again, well written.  AJAX is a pretty big buzz word, and the authors do a great job at explaining what it is and how MooTools makes it much easier to use.\r\n<br /><br />\r\n\r\n<h3>Chapter 8 - Beefing Up MooTools:Using the Mootoools More Plugins</h3>\r\nChapter 8 covers MooTools More, using Fx.Accordian, OverText, and Drag plugins.\r\n<br />\r\nI don't have much to say about this chapter.  It really delivers on covering the plugins it sets out cover.  I think the authors selected the plugins to cover well.  Covering more plugins probably would probably just have watered down the book, or made it unnecessarily longer.  The three plugins were different enough and covered well enough that the reader should have no problem using any of the other plugins.  Using and setting options for the plugins was covered very well.\r\n<br />\r\nThe authors mention to use good markup so the page degrades nicely when Javascript is disabled.  They do more than just mention it, as all their code is very nicely marked up and clean. They also include a useful note on accessibility in the Drag / Drop example.  I was very impressed, again, with the Drag / Drop example.  They not only demonstrated how to use it, but how to make a simple web game using it.  Overall, excellent chapter.\r\n<br /><br />\r\n\r\n<h3>Chapter 9 - Creating Your Own Plugins</h3>\r\nChapter 9 covered how to make your own plugins, designing a design sheet / document, creating a script and then extending it to a plugin, and writing good documentation for it.\r\n<br />\r\nI was blown away by this chapter.  It was the perfect way to end the book, and provided so much useful information that I would buy the book for this chapter alone.\r\n<br />\r\nThe design sheet section was superb.  It described why and how to create a document that provided a general overview of your plugin, including what its purpose is and how it is used.  This is not useful for only plugins, but for anything you develop.  This chapter really reinforced not just how to use MooTools, but how to be a good developer.\r\n<br />\r\nIt then discussed how to actually code the plugin.  I loved this part.  To first create the plugin, it broke it down into an actual use case - get something working, then extend it.  In this case, the plugin was designed to add comments to pictures automatically based on alt tags.  First the authors wrote a function to do it, then extended it by considering how it could be used; what options would be necessary to provide for configuration, how to make sure it doesn't interfere with other elements on the page, etc.\r\n<br />\r\nLastly it talked about documentation, something extremely important that I feel not a lot of beginner books cover well enough.  The authors describe not only how to and why documentation is important, but how to follow documentation standards already in place so others can more easily follow it.  I have nothing but praise here, the authors do a fantastic job and it's a shame other beginner books aren't written this way.\r\n<br /><br />\r\n\r\n<h2>Conclusion</h2>\r\nI think this book is excellent.  It is perfect for a beginner not only to MooTools, but a beginner to programming in general.  It goes far beyond it's initial goal of making MooTools accessible to beginners; it also teaches good programming fundamentals and concepts.  Not only is it good for beginning programmers, it's also excellent for skilled programmers new to to MooTools.  While it does provide a good foundation for beginner programmers, it does so in such a way that it doesn't take away from actually teaching MooTools.\r\n<br /><br />\r\nEven people with a good deal of experience using MooTools will take away a lot from this book.  I picked up more than just a few tricks and it helped solidify my knowledge of MooTools.  The code samples were superb and (apart from one minor error described above) flawless.  I cannot recommend this book enough.  There are few books aimed at beginners I have come across that surpass this one, and it definitely ranks up there as one of my favorite books.\r\n<br /><br />\r\nMy only real complaint is that is did not come out sooner when I was teaching myself MooTools, as it would have saved me a great deal of time and I would have made far less errors. However, it has just been published in December of 2009 so everything discussed is extremely relevant and new.  If you want to use MooTools, if you're just getting into Javascript programming, if you want to solidify your MooTools knowledge, if you are considering any Javascript framework, you need to get this book. I cannot a better MooTools book or a better place to learn it.\r\n<br /><br />\r\nExcellent work, kudos and thank you to Jacob Gube, Garrick Cheung, and Packt Publishing for delivering such an outstanding book.", "description": "MooTools 1.2 Beginner's Guide, authored by Jacob Gube and Garrick Cheung is an outstanding book.  It aims to provide a solid foundation for MooTools new comers, and assumes a limited knowledge of Javascript, HTML, and CSS.  This book aims at not just at providing a laundry list of MooTool function definitions, but at providing a complete coverage of how MooTools geared towards a beginner.  I highly recommend it.", "title": "MooTools 1.2 Beginner's Guide - Review", "num_views": null, "tags": [], "post_date": "2010-11-08 13:19:11", "post_last_edit_date": null, "related_image": ""}}, {"pk": "openlayers-tutorial-part-3-controls", "model": "vasir_blog.post", "fields": {"category": "openlayers", "content": "Controls allow interaction with OpenLayer maps.  Panning, zooming, switching layers, etc, are all handled via controls. Some controls, such as dragging the map around to pan it, while others, like the overview map, do have a visual appearance.\r\n<br />\r\n<br />There are cases where you might not want any controls - these cases are actually fairly common; for instance, if you wanted to show a small section of a map, mimic a static image, allow only logged in users to navigate around the map, etc. then you might want to have no controls on your map.\r\n<br />\r\n<br />This tutorial is broken down and aims to teach you how to do the following:\r\n<br /><div class=\"post_guide\">\r\n1. Adding Controls\r\n<br />2. Customizing Controls - Passing properties and customizing control appearances\r\n<br />3. Adding Controls / Panels Outside of the Map\r\n></div>\r\n<br />We'll show how to create a map without controls shortly, but what kind of stuff can we do with controls?  There are many more examples on <a href=\"http://openlayers.com/dev/examples/\" title=\"OpenLayers Examples\" rel=\"nofollow\">OpenLayer.org's Examples</a> page, simply search for \"control\" to get an idea of what various types of controls there are.  There are lots of simple ones, ranging from scale bars to full vector layer manipulations. \r\n<br />\r\n<br />While there are too many controls to cover in depth here in this post, I'll be focusing on a few different controls throughout this tutorial to exemplify how flexible OpenLayers is and give you an idea of what can be done.\r\n<h2>Adding Controls</h2>\r\nMost controls that are 'visible' (e.g. the layer switcher control) can be placed either inside or outside of the map.  The 'invisible' controls, such the control that allows you to navigate the map when you drag the map with your mouse, are either there are they aren't - so we can't really 'place' them outside the map.  Placing controls inside the map is the default behavior and is a bit simpler than placing it outside (although both are easy once you know how), so we'll cover that first.\r\n<br />\r\n<br />Adding controls to a map can be done in <strong>two</strong> different ways. \r\n<br /><br /><strong>1.</strong> When the map is created, it can accept an array of OpenLayers.Control objects to be passed in when creating the map object, and controls can be added to the map after it has been created.  If no array of control objects are passed in, (like we've been doing in prior tutorials) OpenLayers creates the map with various default controls.  The basic format (psuedo code follows) is: \r\n<pre>controls: [OpenLayers.Control, OpenLayers.Control, etc...]</pre>\r\n<strong>2.</strong> After the map is created, you can add controls individually by calling <em>map.addControl(new OpenLayers.Control)</em>.\r\n<br />\r\n<br />Before we get into that though, let's demonstrate how to add a map with no controls.\r\n<h3>Map Without Controls</h3>\r\nBy default, OpenLayers adds a few controls to your map, such as mouse navigation and the pan / zoom bar, unless you tell it not to.  (The full list of default controls added are <a href=\"http://dev.openlayers.org/releases/OpenLayers-2.8/doc/apidocs/files/OpenLayers/Control/ArgParser-js.html\" title=\"OpenLayers ArgParse Control\" rel=\"nofollow\">ArgParser</a>, <a href=\"http://dev.openlayers.org/releases/OpenLayers-2.8/doc/apidocs/files/OpenLayers/Control/Attribution-js.html\" title=\"OpenLayers Attribution Control\" rel=\"nofollow\">Attribution</a>, <a href=\"http://dev.openlayers.org/releases/OpenLayers-2.8/doc/apidocs/files/OpenLayers/Control/Navigation-js.html\" title=\"OpenLayers Attribution Control\" rel=\"nofollow\">Navigation<a/>, and <a href=\"http://dev.openlayers.org/releases/OpenLayers-2.8/doc/apidocs/files/OpenLayers/Control/PanZoom-js.html\" title=\"OpenLayers Attribution Control\" rel=\"nofollow\">PanZoom</a>\r\n<br />\r\n<br />Let's first create a map with <em>no</em> controls to demonstrate. The following code will create a map object with no controls.  The following line is the main relevant bit of code.\r\n<br /> \r\n<pre>\r\nvar map = new OpenLayers.Map('map', { controls: [] });\r\n</pre>\r\n<div class=\"post_foot_note\">To see an implmentation of this code, view <a href=\"http://vasir.net/~erik/tutorials/openlayers_part3/demo1_no_controls.html\" title=\"OpenLayers Control Example\">OpenLayers Control Part 3 - No controls</a>.</div>\r\n<br />What we're doing here is creating a new OpenLayers.Map object and passing in the ID of the element (typically a div element) that we want the map to appear in.  The next bit <pre>,{ controls: [] }</pre> is where we specify additional parameters to pass in to create the map.  Keep in mind these parameters are called in such a way of key: value, with multiple 'keys' separated by commas.  The curly brackets denote that we're passing in key:value pair(s) (in this case, just one key:value pair).  \r\n<br />The key is <em>controls</em>, and the value is [], which is an empty array element in Javascript.  We are passing in no OpenLayers.Controls - basically, we're telling OpenLayers that we want this map object we're creating to have an empty array of controls; i.e. this map will have no controls.\r\n<h3>Map With Controls</h3>\r\nTo add controls, we can either \r\n<br />1. pass in an array of controls when we instantiate the map (create the map object from the OpenLayers.Map class, like we did above).  We do this by passing in the controls parameters such as { controls: [control1, control2, etc..] } when creating our map, \r\n<br /> or \r\n<br />2. add controls after the map has been created.  We do this by called <em>map.addControl()</em> and inside the paranthesis we pass in an OpenLayers Control object - e.g. <em>new OpenLayers.Control.LayerSwitcher()</em>\r\n<br />\r\n<br />The second method is what I typically do when creating my maps; it comes in handy especially when you want to allow controls to be added or removed dynamically.  Let's cover how to add a control to the map using both methods.  I'll be using the OpenLayers Overview Map control (yes, the overview map is considered a control) to demonstrate. \r\n<h4>Method 1 - Passing in controls on map creation</h4>\r\nThere are really two ways to do this.  Because OpenLayers expects you to pass in an array, you can build the array before you actually pass it in, making the code a bit easier to read.  Trying to keep this as simple as possible to those not much experienced with Javascript, we'll use the above example code to demonstrate.  So, let's take a look:\r\n<pre>\r\nvar map = new OpenLayers.Map('map', { controls: [] });\r\n</pre>\r\nThe line here is <pre>controls: []</pre> Again, we're passing in an empty array for the controls, so no controls will show up.  We can subsitute a previously created list here instead though, as follows:\r\n<pre>\r\nvar my_controls = []\r\nvar map = new OpenLayers.Map('map', { controls: my_controls });\r\n</pre>\r\nHere we set my_controls equal to an empty array, and pass in my_controls to controls.  Although we have an extra line, we're doing exactly the same thing we did above, only this time we're passing in a previously created array instead of creating it in the map object call.  It doesn't make a lot of sense to do it this way in <em>this</em> example, but once you start adding more than one control to the map, you'll find it makes it much easier to read your code.  \r\n<br />\r\n<h5>Example</h5>\r\nAlright, let's make an actual control now.  We're going to add it to the map the way we just described, by creating a list of controls first.  This will make it easier demonstrate how we can add controls after the map has been created too.  Now, doing it this method we will only have the controls we add to the map, so panning / zooming will not be enabled by default as we are overriding the default controls passed in.  We'll be using the Overview Map control here to demonstrate.\r\n<br />This is the relevant code.\r\n<pre>\r\nmap_controls = [ new OpenLayers.Control.OverviewMap() ];\r\nmap = new OpenLayers.Map('map', {controls: map_controls});\r\n</pre>\r\n<div class=\"post_foot_note\">\r\nThe full code can be found at <a href=\"http://vasir.net/~erik/tutorials/openlayers_part3/demo2_overview.html\" title=\"OpenLayers Control Example\">OpenLayers Overview Map Control</a>.\r\n</div>\r\n\r\n<br />Notice the only control is the Overview Map.  We can add more controls by simply seperating them commas.  \r\n<pre>\r\nmap_controls = [ new OpenLayers.Control.OverviewMap(), new OpenLayers.Control.LayerSwitcher() ];\r\nmap = new OpenLayers.Map('map', {controls: map_controls});\r\n</pre>\r\n<div class=\"post_foot_note\">\r\nA demo with this code can be found at <a href=\"http://vasir.net/~erik/tutorials/openlayers_part3/demo3_overview.html\" title=\"OpenLayers Control Example\">OpenLayers Overview Map and Layer Switcher Control</a>.\r\n<br /></div>\r\nHere we have both the overview map and layer switcher; but nothing else.  Finally, before we move on, let's add those two controls and some of the defaul controls OpenLayers add to have a more functional map.\r\n<pre>\r\n    map_controls = [ new OpenLayers.Control.OverviewMap(), \r\n                    new OpenLayers.Control.LayerSwitcher(),\r\n                    new OpenLayers.Control.PanZoomBar(),\r\n                    new OpenLayers.Control.MouseToolbar(), \r\n                    new OpenLayers.Control.KeyboardDefaults()];\r\n    \r\n    map = new OpenLayers.Map('map', {controls: map_controls});\r\n</pre>\r\n<div class=\"post_foot_note\">Notice that the controls are seperated by commas, but I have also added new lines for readability.  The code will work the same if there are no line breaks, but it won't be as readable.  Again, you can see the demo at at <a href=\"http://vasir.net/~erik/tutorials/openlayers_part3/demo4_somedefaults.html\" title=\"OpenLayers Control Example\">OpenLayers Adding Base Controls</a>.\r\n</div>\r\n<br />Now that we know how this works though, let's move on to something a bit more common.\r\n\r\n<h4>Method 2 - Adding controls after map has been created</h4>\r\nWe're going to let OpenLayers add some of the basic controls for us.  You may not want to do this, depending on your own needs for the map - if you dont want to allow users to navigate around the map, for instance, then you should probably add controls manually like the method detailed above. \r\n<br />Let's set up a map using the default OpenLayers controls and we'll add the Overview and Layer Switcher control to it.\r\n<pre>\r\n    map = new OpenLayers.Map('map');\r\n    map.addControl(new OpenLayers.Control.OverviewMap());\r\n</pre>\r\n<div class=\"post_foot_note\">\r\nYou can view the demo at <a href=\"http://vasir.net/~erik/tutorials/openlayers_part3/demo5_addcontrols.html\" title=\"OpenLayers Adding Controls Example\">OpenLayers Adding Controls</a>.</div>\r\n<br />Since we didn't pass in controls to the map object, the default controls are added automatically.  The next line is where we actually add the control to the map.  \r\n<pre>map.addControl(new OpenLayers.Control.OverviewMap()); </pre>\r\n<em>map</em> is our map object we just created, and <em>addControl</em> is a function call we make that -takes in- an OpenLayers Control object and adds it to the map.  In this case, we are passing in <em>new OpenLayers.Control.OverviewMap()</em>.  OverviewMap is the class, and we are creating an object from the class by typing <em>new</em> before it.  \r\n<div class=\"post_side_note\">\r\nIf this doesn't make too much sense, don't worry much about it for now - this concept is called Object Orientented Programming, and it is outside the scope of this tutorial.  Without trying to further confuse things, think of a class as a blueprint for a house, and an object as a house created by the blueprint.  This idea applies here; OpenLayers.Control.OverviewMap is a class, which is sort of like the blueprint for an overview map control.  We can't actually do anything with the blueprint though, to manipulate it we need to create an object by called new OpenLayers.Control.OverviewMap(), which basically takes the blueprint and generates an object from it - this object is what we pass into the map.addControl( ) function call, as passing in just the blueprint won't do much good (it'd be similar to opening a door of a house - you can't open a door on the blueprint (the class), but you can open a door on the house (the object)).\r\n</div>\r\nWe can also make as many calls to <em>addControl</em> as we like, and we can use it in conjunction with any controls we pass in when we create the map...OpenLayers is pretty flexible like that.\r\n<h4>Recap</h4>To recap, we can add controls by\r\n<div class=\"post_guide\">\r\n1. Passing in an array of controls creating the map\r\n<br />2. Calling the function <em>addControl(Control)</em> and passing in a single OpenLayer control object\r\n</div>\r\n<h5>Example</h5>\r\n<strong>Adding controls when map is created</strong>\r\n<pre>map = new OpenLayers.Map('map', {controls: [new OpenLayers.Control.OverviewMap()] });</pre>\r\n<strong>Adding controls to an already created map</strong>\r\n<br /><pre>map.addControl(new OpenLayers.Control.OverviewMap());</pre>\r\nThere are a plethora of controls we can add to the map, and I won't cover them all, but you can see a list of them at <a href=\"http://dev.openlayers.org/releases/OpenLayers-2.8/doc/apidocs/files/OpenLayers/Control/ArgParser-js.html\" title=\"OpenLayers Docs\" rel=\"nofollow\">OpenLayer's Doc Site</a>.\r\n<h2>Customizing Controls</h2>\r\nSo, adding controls is pretty easy, but often we want to customize them a bit.  This part can be a little tricky, as each control has its own set of configuration options - for instance, a permalink control and overview map control do not share the same configuration options.  Some controls can also be placed in an HTML element outside of the map, such as the layer switcher or vector editing toolbar.  We'll first cover configuration basics, and then discuss how to add a control outside a map.\r\n<br />\r\n<br />Let's walk through how to customize an overview map control, and by doing so you'll have the necessary knowledge to customize any other control (hopefully).  I'm going to break down control customization into two parts:\r\n<br />\r\n<div class=\"post_guide\">\r\n1. Instantiation (creation) parameters - handles the actual control options\r\n<br />2. Style (CSS) customization - handles the look / feel / position / style of the control\r\n</div>\r\nFor this section, I'll use the Overview Map control as an example.  The overview map control does not have the same properties of other controls, so be cognizant of this when adding your own controls.  The best place to find out what we can do when calling an OpenLayer control is at the OpenLayer documentation site, and for this we'll be using <a href=\"http://dev.openlayers.org/releases/OpenLayers-2.8/doc/apidocs/files/OpenLayers/Control/OverviewMap-js.html\" title=\"OpenLayers Overview Map Control\" rel=\"nofollow\">OpenLayers Overview Map Control Doc</a>.\r\n<h3>1. Customization on Instantiation (creation)</h3>\r\nWhen we create a control, we define what options we want it to be created with.  We can, however, manipulate the control after it is created, but for now let's just stick to defining everything when we create the control.\r\n<br />Here's some code to create an overview map control with a couple properties defined:\r\n<pre>\r\n    map.addControl(new OpenLayers.Control.OverviewMap(\r\n                {autoPan:true,\r\n                layers: [new OpenLayers.Layer.WMS(\"OverviewMap\",\r\n                    \"http://labs.metacarta.com/wms/vmap0\", \r\n                    {layers: 'country_01'})]\r\n                }\r\n                ));\r\n</pre>\r\n<div class=\"post_foot_note\">\r\nThese are the most relevant lines, but you can take a look at the <a href=\"http://vasir.net/~erik/tutorials/openlayers_part3/demo6_customize_overview.html\" title=\"OpenLayers Adding Controls Example\">customizing overview map control demo</a> to see it in action.\r\n</div>\r\n\r\n<br />This may look intimidating, but let's break it down.  \r\n<br />We already know <em>map.addControl(new OpenLayers.Control.OverviewMap(</em> this line.  <em>map</em> is our map object, and addControl is the same function we've been using.  Notice that we are calling the function add just one control, so we only pass one control into the function.  We're creating a new OverviewMap control object and passing it in - still, nothing new here.  The next line is new though.\r\n<pre>{autoPan:true,</pre>\r\nNotice the curly brackets - this denotes that we're going to start passing in key:value pairs, which are the options we want to set for this control.  <em>autoPan</em> is the key, and <em>true</em> is the value.  Notice the comma afterwards, which means we're going to pass in another key:value pair next.  Before we go to the next line, let's briefly discuss what autoPan:true means.\r\n<br />\r\n<br />I'm going to quote the <a href=\"http://dev.openlayers.org/releases/OpenLayers-2.8/doc/apidocs/files/OpenLayers/Control/OverviewMap-js.html#OpenLayers.Control.OverviewMap.autoPan\" title=\"OpenLayers Overview Map Doc\" rel=\"nofollow\">OpenLayer Overview Control Documentation page</a> directly so you get an idea how to use it.\r\n<br />autoPan - \"{Boolean} Always pan the overview map, so the extent marker remains in the center.  Default is false.  If true, when you drag the extent marker, the overview map will update itself so the marker returns to the center.\"\r\n<br />\r\nWhat this means is that {Boolean} is the -type- of value that is expected in the key:value pair.  Thus, this means that autoPan expects to receive either <em>true</em> or <em>false</em> for its value.  If we don't pass in autoPan:true when we create our overview control, OpenLayers assumes autoPan is set as false.  We could also explicitly say autoPan:false but this is not necessary, as we know from looking at the docs that OpenLayers assumes the value is false unless otherwise specified.\r\n<br />\r\nOk - so moving along.  The next line looks a bit hairy\r\n<pre>\r\nlayers: [new OpenLayers.Layer.WMS(\"OverviewMap\",\r\n                    \"http://labs.metacarta.com/wms/vmap0\", \r\n                    {layers: 'country_01'}) ]\r\n</pre>\r\nBut let's take a look.  All that's going on here is that <em>layers</em> is the key and an array containing a single layer object is the value.  From the <a href=\"http://dev.openlayers.org/releases/OpenLayers-2.8/doc/apidocs/files/OpenLayers/Control/OverviewMap-js.html#OpenLayers.Control.OverviewMap.layers\" title=\"OpenLayers Overview Map Doc\" rel=\"nofollow\">OpenLayer docs</a>, layers expects an <strong>{Array(OpenLayers.Layer)}</strong>. \r\n<br />\r\n<br />What's this mean?  Well, the overview map expects an array of OpenLayers Layer objects to be passed in.  Layers are discussed in detail in the <a href=\"http://vasir.net/blog/openlayers/openlayers-tutorial-part2-layers/\" rel=\"nofollow\" title=\"OpenLayers Layer Tutorial\">previous tutorial, part 2 - layers</a>. So without getting too detailed here, we're basically passing in a single OpenLayers WMS Layer.  This layer is the only layer in our array, but if we wanted another we could just add a comma and specify as many more layers as we want.  We are also passing in parameters to this new OpenLayers Layer object so we get a different layer for the overview map.  By default, the overview map uses the maps' base layer.\r\n<br /><br />\r\nSo, my lengthy explanations aside, we see that it isn't too tricky to pass in construction parameters.  We do it when we create our layers, so it's not new - but there are quite a lot of options, and the official OpenLayers docs describe all the options.  All other controls are called and defined the way we just did above, so it's only a matter of figuring out what control and what options you want to specify.  But after we do this, we might want to give it a custom style.  OpenLayers is generally pretty good with allowing customizable controls with CSS style sheets.  \r\n<h3>2.Customizing OpenLayers Controls with CSS</h3>\r\n<strong>Cascading Style Sheets</strong> (CSS) allow us to specify how HTML elements look and feel, their size, position, font size, etc. etc.  Anything related to the way the page looks can pretty much be handled via CSS; CSS is a way to customize appearance.  OpenLayers allows us to style our controls with CSS, which makes creating a slick looking map much, much easier.  \r\n<br />\r\n<br />All OpenLayers controls have an associated CSS class where we can specify a style we want to apply to it. \r\n<br /><div class=\"post_side_note\">\r\nI won't cover much CSS in this post, but CSS basically expects an element with property : value pairs, which can be views as key:value pairs, separated by a semi-colon ( ;  ). Here's the basic structure:\r\n<pre>element { key: value; }</pre>\r\nWhere <em>element</em> is an HTML element (can be an element like div (would apply to all div elements) or an ID (single element) or class (multiple elements) ), <em>key</em> is an attribute of the element (such as width or height) and <em>value</em> is, surprise, the value.  For things like width or height, the value is either a pixel value (like 500px) or a percentage (like 50%).\r\n</div>\r\n<br />To define a style for an OpenLayers element, we must access it by class name.  The class names are set up in form of <em>.olControlControlName</em>.  \r\n<br />.olControl is always at the beginning of the classname, and the control name follows.  So, for our overview map, the classname we would need to override the default CSS style is \r\n<br /><pre>.olControlOverviewMap</pre>\r\n<br />Notice the period at the beginning, to those unfamiliar with CSS that denotes that what follows the period is a class name.\r\n<br />Now we can override the default styles and make it look like however we want.  Here's an example CSS declaration you can add that will style the overview map on the page; feel free to mess around with the declaration and style it however you would like.\r\n<pre>\r\n&lt;style&gt;\r\n    .olControlOverviewMap {\r\n        background:#ff0000;\r\n        width:200px;\r\n    }\r\n    .olControlOverviewMapElement {\r\n        background:#00ff00 !important;\r\n    }\r\n&lt;/style&gt;\r\n</pre>\r\n<div class=\"post_foot_note\">\r\nView the <a href=\"http://vasir.net/~erik/tutorials/openlayers_part3/demo7_customize_css.html\" title=\"OpenLayers Adding Controls CSS Example\">overview map css control demo</a>.\r\n</div>\r\nNow, this is a good example although it is a little tricky, because styling the overview map is a little tricky.\r\n<br />You'll notice we have the olControlOverviewMap element's background set as red (#ff0000) but the olControlOverviewMapElement element's background as green (#00ff00) and has !important after it.  This is to ensure that the overview map element's background is not overwritten - if we don't include any background, it is blue by default.  This is because OpenLayer's Overview Map control contains another CSS element, namely the OverviewMapElement, and we need to define it also.  Most controls are not set up this way, but the overview map is fairly common and does not exactly follow the same style guidelines as other controls.  \r\n<h2>Adding Controls Outside of Map</h2>\r\nThe last topic we'll cover is how to add a control outside the map.  With the previously discussed code, this should be quite an easy feat to accomplish.  \r\n<br />There are many cases where you might want a control outside the map - a toolbar of buttons in a div that sits on top the map, for instance.  You can also create custom buttons, which will be discussed in depth in a future tutorial.  \r\n<br />There are two main ways to place controls outside the map\r\n<br /><div class=\"post_guide\">1. Place the control itself outside the map\r\n<br />2. Place the control in a \"panel\" outside the map.  The panel contains a group of controls. \r\n</div>\r\n<h4>Placing a control outside the map</h4>\r\nTo place a control outside the map, we need an element to place it in (we'll use a div with an id of \"external_control\") and we specify a div parameter when calling the control.  To demonstrate:\r\n<br /><strong>HTML Code</strong>\r\n<pre>\r\n&lt;div id=\"external_control\"&gt;&lt;/div&gt;\r\n</pre>\r\n<br /><strong>Javascript Code</strong>\r\n<br /><pre>\r\nvar external_control = new OpenLayers.Control.MousePosition({\r\n        div: document.getElementById('external_control') });\r\n\r\nmap.addControl(external_control);\r\n</pre>\r\nYou can <a href=\"http://vasir.net/~erik/tutorials/openlayers_part3/demo8_external_control.html\" title=\"External Controls\" rel=\"nofollow\">view the external control demo here</a>.\r\n<br />\r\n<br />We're basically creating a MousePosition control and setting the value of <em>div</em> to equal an HTML element with the element ID of 'external_control'.  The mouse position control is outside the div, in it's own div.  We could apply whatever style we want, either by styling the div itself (without using OpenLayers style classes) or style the control itself (using the .olControlMousePosition class), or both.\r\n<br />\r\n<h4>Placing a control outside the map in a panel</h4>\r\nPanels are basically a collection of controls which can be placed inside or outside of the map.  These are useful for grouping related buttons together, such as pan buttons, zoom buttons, etc.  To demonstrate, we'll build a panel from scratch and add some controls as buttons to it.  We need an HTML element to hold our panel, so we'll do what we did above, but we'll get it an ID of 'panel'\r\n<pre>\r\n&lt;div id=\"panel\"&gt;&lt;/div&gt;\r\n</pre>\r\n<br />Now we just need to create the Panel control itself\r\n<pre>\r\n    var external_panel = new OpenLayers.Control.Panel({\r\n                    div: document.getElementById('panel') });\r\n    map.addControl(external_panel);\r\n</pre>\r\n<br />The demo code will come shortly.  Right now, this does nothing but create an empty Panel control attached to our 'panel' div element.  We need to now add controls to it.\r\n<br />\r\n<br /><h5>Control Types</h5>\r\nThere are three 'types' of controls OpenLayers provides for use in a panel.\r\n<br />1. TYPE_BUTTON\r\n<br />2. TYPE_TOOL\r\n<br />3. TYPE_TOGGLE\r\n<br />\r\n<br /><h6>TYPE_BUTTON</h6>\r\nThese controls call an event / trigger an action when clicked.  An example would be a zoom in / out button; once clicked, an event is triggered to zoom the map in\r\n<br />\r\n<br /><h6>TYPE_TOOL</h6>\r\nThese controls 'turn on' when clicked and 'turn off' when clicked again.  An example would be the editing buttons on <a href=\"http://dev.openlayers.org/releases/OpenLayers-2.8/examples/editingtoolbar.html\" title=\"OpenLayers Vector Layer Editing Example\">OpenLayer's Editing Toolbar Example</a>.  Once the control is activated (e.g. the pan button - the button with the hand icon), it stays activated until it is either clicked off or another control is activaed.\r\n<br />\r\n<br /><h6>TYPE_TOGGLE</h6>\r\nThese controls are similiar to the TYPE_TOOL, as they are activated and deactived on mouse click; however, they do not affect the state of other controls - meaning, that if a TYPE_TOGGLE button is activated, it will not deactivate other controls.  Only one TYPE_TOOL button can be active at a type, but TYPE_TOGGLE buttons do not carry this restriction.\r\n<br />\r\n<h3>Adding controls to panels</h3>\r\nAlright, so let's get to it.  We're going to put together what we've learned so far to add zoom in and out buttons to the panel outside the map and edit their class to make them look something like a button.  The first step, creating the panel, was done above.  The next step is to simply add two more controls now - one will be a zoom in control, the other a zoom out control.  By default, there is no style associated with these controls when we place them outside the map, as they are called normally by methods such as scrolling in or out.  \r\n<br />Before we describe exactly what we need to do, let's take a look at the docs for the zoom in and out controls - <a href=\"http://dev.openlayers.org/releases/OpenLayers-2.8/doc/apidocs/files/OpenLayers/Control/ZoomIn-js.html\" title=\"ZoomIn\">Zoom In control</a>.  You'll notice there's not much there.  It doesn't have any special properties, although it does inherit everything from the base OpenLayers.Control class, so anything we can do to that class we can do to the ZoomIn class.  The ZoomOut class is the same way.  So, we don't need to worry about passing in anything extra really, we'll just create the two controls without passing anything in; here's how we do it.\r\n<div class=\"post_foot_note\">\r\n1. Create and add a panel to the map\r\n<br />2. Create and add a zoom in and a zoom out control to the map\r\n<br />3. Add the zoom in and zoom out controls to the panel\r\n<br />4. Add a style to the two controls\r\n</div>\r\n<h5>1. Create and add a panel</h5>\r\nWe've done this above.  We need to create a div with an ID of \"panel\" and add the corresponding Javascript code.\r\n<pre>\r\n    var external_panel = new OpenLayers.Control.Panel({\r\n                    div: document.getElementById('panel') });\r\n    map.addControl(external_panel);\r\n</pre>\r\n<br />\r\n<h5>2. Create and add a zoom in and a zoom out control to the map</h5>\r\n<br />All we have to do is create the controls\r\n<pre>\r\n    var control_zoom_in = new OpenLayers.Control.ZoomIn();\r\n    var control_zoom_out = new OpenLayers.Control.ZoomOut();\r\n</pre>\r\nand then add them to the map\r\n<pre>\r\n    map.addControl(control_zoom_in);\r\n    map.addControl(control_zoom_out);\r\n</pre>\r\n<br /><h5>3. Add the zoom in and zoom out controls to the panel</h5>\r\nAlright, so we have those two controls added to the map; we now need to add the controls to the panel.\r\n<pre>\r\n    external_panel.addControls([control_zoom_in, control_zoom_out]);\r\n</pre>\r\nYou'll notice we call the function <em>addControls</em>.  To add any controls to a panel, we must call this function and pass in an array of controls - even if we only want to add one control (there is no \"addControl\" function, only addControls)\r\n<br /><div class=\"post_foot_note\">\r\nIf we take a look at the map now, we can see that it doesn't <em>look</em> like there is a panel because we haven't applied any styles yet. <a href=\"http://vasir.net/~erik/tutorials/openlayers_part3/demo9_panel_no_style.html\" title=\"External Controls in Panel - No CSS\" rel=\"nofollow\">Controls outside map demo in panel - no style</a></div>\r\nThis is because by default, there is no style associated with the zoomin or zoomout controls.  Let's finish up this demo though by adding some CSS\r\n<h4>Adding style to controls in panels</h4>\r\nThe naming convention is the same as we mentioned above for naming controls inside panels, however, as these are controls inside a panel, they have 'states' attached attached to them.  <em>ItemActive</em> or <em>ItemInactive</em> is added to the end of the control's class name.  For example, our zoom in button has the class name\r\n<br /><pre>.olControlZoomInItemInactive</pre>\r\n<br />Because of the type of this control is a button, its only relevant class is <em>olControlZoomInItemInactive</em>.  When the button is clicked, it does not become active or inactive, but simply triggers the zoomIn event. \r\n<br />So, let's add some basic style to our controls to make them look a little bit like buttons.  Here's the relevant CSS code I use in the demo below:\r\n<pre>\r\n.olControlZoomInItemInactive {\r\n    background:url(http://dev.openlayers.org/releases/OpenLayers-2.8/img/zoom-plus-mini.png) no-repeat;\r\n    border:2px solid #232323;\r\n    float:left;\r\n    height:18px;\r\n    margin-right:5px;\r\n    width:18px;\r\n}\r\n.olControlZoomOutItemInactive {\r\n    background:url(http://dev.openlayers.org/releases/OpenLayers-2.8/img/zoom-minus-mini.png) no-repeat;\r\n    border:2px solid #232323;\r\n    float:left;\r\n    height:18px;\r\n    margin-right:5px;\r\n    width:18px;\r\n}\r\n</pre>\r\n<div class=\"post_foot_note\">\r\nI'm just using the zoom-minus and zoom-plus images from OpenLayer's website to represent buttons, but you stlye them however you'd like.  \r\n<br />Take a look at the finalized example here - <a href=\"http://vasir.net/~erik/tutorials/openlayers_part3/demo9_panel_with_style\" title=\"External Controls in Panel - With Style\" rel=\"nofollow\">Controls outside map demo in panel with CSS style</a>\r\n</div>\r\n<h2>Conclusion</h2>\r\nWith this tutorial, hopefully you've learned how to add controls to an openlayers map, customize them a bit, give them some style, and add controls and panels outside a map.  Although this tutorial was a bit lengthy, it really just scratches the surface of what is possible to do with OpenLayers controls.  In the next tutorial, I plan to discuss how to use the OpenLayers Event system and create your own custom controls.  Stay tuned.\r\n", "description": "OpenLayers Tutorial Part 3 - Controls.  Tutorial covering OpenLayers Controls, various examples and sample code, including styling controls with CSS, placing controls outside the map in panels, and more. ", "title": "OpenLayers Tutorial - Part 3 - Controls", "num_views": null, "tags": ["openlayers_tutorial"], "post_date": "2010-05-02 14:27:01", "post_last_edit_date": null, "related_image": ""}}, {"pk": "dijkstras_algorithm_shortest_path", "model": "vasir_blog.post", "fields": {"category": "game_development", "content": "<em>Note - This is not my area of expertise but I am very much interested in it and I welcome any corrections </em>\r\n\r\n<strong>Outline</strong> <hr />\r\nThis post will cover the basics of Dijksta's shortest path algorithm and how it can apply to path finding for game development. It is my opinion that understanding this algorithm will aid in understanding more complex AI algorithms, such as A*. This post is aimed more towards developers starting out in game development or those curious about Dijkstra's algorithm, but this will be a somewhat simplification of it and discuss mainly the concepts. \r\n<strong>Introduction</strong> \r\n\r\n<em>What\u2019s an algorithm?</em>  An algorithm is basically a system for solving a problem. For us humans, looking at a 2d grid with many objects we can easily tell which path the character should take to reach his or her goal without thinking much about it. What we want to try to do is translate those semi-subconscious mental steps to a list of steps that anyone (or a computer) can repeat to get the same answer every time.  \r\nFinding the shortest route from one object to another when developing game AI is a very common problem and many solutions exist. At least in 2d grid / tile based games, perhaps the most common one is A*, with Dijkstra's being also quite good. Depending on the complexity of the game, Dijkstra's algorithm can be nearly as fast as A*, with some tweaking. A* is generally a better implementation, but can be slightly complex, so I'm going to discuss the fundamentals of Dijkstra's algorithm and in later posts talk about others, such as A*.\r\n \r\nI'll be using the word graph here a lot, and it may not be immediately obvious how this translates to game dev, but you can easily translate this to 2d grid or tile based maps.\r\n\r\n<strong>Dijkstra\u2019s Algorithm</strong>\r\nLet's first define what exactly the problem is.  Take this graph, for instance.\r\n<img src=\"http://vasir.net/~erik/tutorials/shortest_path/shortest_path1.png\" alt=\"Shortest path example\" />\r\nFor the purposes of this post, the blue circles represent \"nodes\" or \"vertices\"  and the black lines are \"edges\" or \"node paths\".  Each edge has a cost associated with it.  \r\nFor -this- image, the number in each node in this image is simply a label for the node, not the individual node cost. \r\n\r\nOur problem is to find the most cost efficient route from Node1 to Node4.  The numbers on the node paths represent the \"cost\" of going between nodes.  The shortest path from Node1 to Node4 is to take Node1 to Node3 to Node4, as that is the path where the least cost is incurred. \r\nSpecifically, the cost to go from Node1 to Node3 is (2), plus the cost of Node3 to Node4 (5) is 7 (2 + 5).\r\nNow, we can see that the alternative (Node1 to Node2 to Node4) is much more costly (it costs 11, versus our 7).\r\n\r\nAn important note - greedy algorithms aren't really effective here.  A greedy algorithim would bascially find the cheapest local costs as it traverses the graph with the hopes that it would be globally optimum when it's done. Meaning, a greedy algorithm would basically just take the first low value it sees.  In this case, the lower value is 1 but the next value is 10.  If we were to simply just apply a greedy algorithm, we end up taking the more costly from Node1 to Node4. \r\n\r\nFiguring out the best path to take with this graph is pretty easy for us to do mentally, as if you can add small numbers you can figure out the best path to take.  For a small graph like the previous, it's quite easy.  The goal is translate the steps we take in our mind to steps a computer follow. \r\n\r\n<hr />\r\nDijkstra's algorithm is an algorithm that will determine the best route to take, given a number of vertices (nodes) and edges (node paths).  So, if we have a graph, if we follow Dijkstra's algorithm we can efficiently figure out the shortest route no matter how large the graph is. \r\n\r\nNot only does Dijkstra's algorithm provide for us the shortest path from NodeA to NodeB, it provides for us the shortest route to -any- node on the graph between any other node.\r\n\r\nThis concept is essentially how Google maps provides you directions.  There are many thousands of vertices and edges, and when you ask for directions you typically want the shortest or least expensive route to and from your destinations.\r\n\r\nSo, how does this apply to game AI?  Well, the correlation is quite strong.  In a 2d grid or tile based map, there are many nodes (or tiles) and each tile can have a value associated with it (perhaps it is less expensive to walk across grass than it is to walk across broken bottles or lava).  \r\n\r\nYou can set up your tiles so that each tile has a node path value associated with it, so if you put an NPC in the map you can use Dijkstra's algorithm to compute the shortest path for the NPC to take to -ANY- tile in your map.\r\n\r\n<strong>How it works</strong>\r\nFirst we'll describe Dijsksta's algorithm in a few steps, and then expound on them furher:\r\n\r\n<strong>Step 0.</strong> Temporarily assign C(A) = 0 and C(x) = infinity for all other x.\r\nC(A) means the Cost of A\r\nC(x) means the current cost of getting to node x\r\n\r\n<strong>Step 1.</strong>Find the node x with the smallest temporary value of c(x).  \r\nIf there are no temporary nodes or if c(x) = infinity, then stop.\r\nNode x is now labeled as permanent.  Node x is now labeled as the current node.  C(x) and parent of x will not change again.\t\r\n\r\n<strong> Step 2.</strong> \r\nFor each temporary node labeled vertex y adjacent to x, make the following comparison:\r\nif c(x) + Wxy  < c(y), then \r\nc(y) is changed to c(x) + Wxy\r\nassign y to have parent x\r\n\r\n<strong>Step 3.</strong> Return to step 1.\r\n<br /><br />\r\n<hr />\r\nBefore diving into a little more tricky graph, we'll stick with the original graph introduced above.  Let's get started.\r\n<br />\r\n<strong>Step 0.</strong>\r\n<blockquote>Temporarily assign C(A) = 0 and C(x) = infinity for all other x.\r\nC(A) means the Cost of A\r\nC(x) means the current cost of getting to node x\r\n</blockquote>\r\n\r\nThe following graph has changed a little from the one shown above.  The nodes no longer have labels, apart from our starting point NodeA and our goal NodeB.\r\n\r\n<img src=\"http://vasir.net/~erik/tutorials/shortest_path/sp_1_1.png\" alt=\"Shortest Path Step 0\" />\r\nLegend\r\nOrange line \u2013 path to parent node\r\nYellow arrow \u2013 points to the node\u2019s parent\r\nGreen node cost text \u2013 node cost is permanent\r\nWhite node cost test \u2013 node is temporary\r\nYellow highlight \u2013 Current node\r\n\r\nWe assign a cost of 0 to Node A and infinty to everything else.  We're done with this step now.\r\n \r\n<strong>Step 1.</strong> \r\n<blockquote>Find the node x with the smallest temporary value of c(x).  \r\nIf there are no temporary nodes or if c(x) = infinity, then stop.\r\nNode x is now labeled as permanent.  Node x is now labeled as the current node.  C(x) and parent of x will not change again.\t\r\n</blockquote>\r\nSince 0 is the lowest value, we set A as the current node and make it permanent.\r\n\r\n<strong>Step 2.</strong>\r\n<blockquote>\r\nFor each temporary node labeled vertex y adjacent to x, make the following comparison:\r\nif c(x) + Wxy  < c(y), then \r\nc(y) is changed to c(x) + Wxy\r\nassign y to have parent x\r\n</blockquote>\r\nThere are two temporary nodes adjacent to our current node, so calcuate their cost values based on the current node's value + the cost of the adjacent node.  Assign that value to the temporary node only if it's less than the value that's already there. So, to clarify:\r\nThe top node is adjacent to the current node and has a cost of infinity.  0 (the current node's value) + 1 (the cost associated with the temporary node) = 1, which is a less than infinity, so we change it's value from infinity to 1.  This value is not yet permanent.\r\nNow, do the same calucation for the next adjacent node. which is the bottom node. The value is 0 + 2 = 2, which is also less than infinity.  To illustrate:\r\n<img src=\"http://vasir.net/~erik/tutorials/shortest_path/sp_1_2.png\" alt=\"Shortest Path Step 2\" />\r\n\r\nSo we now have looked at each temporary node adjacent to the current node, so we're done with this step. \r\n\r\n<strong>Step 3.</strong>\r\n<blockquote>Return to step 1.</blockquote>\r\nSo, let's go back to step 1.  From this point forward, I'll be using the term iteration to describe our progression through the graph via Dijkstra's algorithm. The steps we previously took I'll refer to as iteration 0, so now when we return to step 1 we'll be at iteration 1.\r\n<hr />\r\n\r\n<strong>Iteration 1</strong>\r\nWe\u2019re back at the first step.  It says look for the smallest temporary cost value and set it as permanent.  We have two nodes to look at, the top node with cost 1 and the bottom node with cost 2.  \r\nThe top node has a cost of 1, which is less than 2, so we set it as permanent and set it as our current node.  We designate this by a yellow shadow in the image. Now, it is important to keep in mind that the bottom node still has a temporary cost assigned to it.  This temporary cost is what allows the algorithm to find actual cheapest route \u2013 you\u2019ll see in a second.  \r\n\r\n<strong>Step 1.</strong>\r\nFind the cheapest node.  Done, it\u2019s set as permanent and our current node is this one.  This node value will not change.  \r\n<img src=\"http://vasir.net/~erik/tutorials/shortest_path/sp_2_1.png\" alt=\"Shortest Path Iteration 1 Step 1\" />\r\nThe yellow highlight indictates the node we are currently on, and the green text means the node cost is permanent.  The nodes with white text for their costs are temporary nodes.    \r\n<br /><br />\r\n<strong>Step 2.</strong>\r\nAssign cost values.  There is only one adjacent node to our current node.  It's current value is infinity, which is less than 1 + 10, so we assign 11 to it's temporary cost value.\r\n<img src=\"http://vasir.net/~erik/tutorials/shortest_path/sp_2_2.png\" alt=\"Shortest Path Iteration 1 Step 2\" />\r\nThis is not the shortest path from NodeA to NodeB, but that's fine.  The algorithm traverses all nodes in the graph, so you get the shortest path from any node to any other node. You can see that the shortest path from NodeA to the top node is the line between NodeA and the top node - well, of course, you say, because that's the only possible path from NodeA to the top node.  And you are right to say that, because it's true.  But let's say we have a node above the top node (we'll call it Top2).  The shortest path to that would from NodeA to the top node to node Top2.  Even though our goal is to go from A to B, as a side effect we also get the shortest route to every other node.  If that's a bit unclear, it should clear up after we go through the next iteration.\r\n\r\nDone with step 2, let's continue to step 3.\r\n\r\n<strong>Step 3.</strong>\r\nReturn to step 1.\r\n<hr />\r\n<strong>Iteration 2</strong>\r\nOk, so now we look again at the temporary nodes to see which has the lowest value.  Even though we calculated the temporary value of B to be 11, we are not done because that value might change (in this case, it will definitely change). \r\n\r\n<strong>Step 1.</strong>\r\nPick the cheapest node and set it as our current node and make it permanent, and assign it its parent.\r\n\r\nWe have two remaining temporary nodes with costs of 2 and 11.  2 is lower, so pick it and set it permanent and set it as our current node.  \r\nLet\u2019s take a look at the graph to elucidate a bit.\r\n\r\nSo, out of 11 and 2, as we said, 2 is cheaper so pick it.  We set this node\u2019s value to be permanent and assign its parent is NodeA, demonstrated by the arrow.\r\n<img src=\"http://vasir.net/~erik/tutorials/shortest_path/sp_3_1.png\" alt=\"Shortest Path Iteration 2 Step 1\" />\r\nNotice that the parent of the top node does not, the top node still points to NodeA, because the best path from NodeA to the top node is exactly that - NodeA to the top node - again, this is a side effect of Dijkstra's algorithim in that we weren't looking for the shorest path from NodeA to the top node (we want NodeA to NodeB), but we learn about the shortest route between -any- two nodes in the graph.\r\n\r\n<strong>Step 2.</strong> \r\nAssign cost values to temporary nodes adjacent to the current node. \r\nAgain, like in the previous iteration, there is only one node to do a cost calculation on, as there is only one temporary node adjacent to the current node. This adjacent node is NodeB.  So, we check to see if 2 + 5 < Node B\u2019s temporary cost of 11.  It is, so we change Node B from 11 to 7.\r\n<img src=\"http://vasir.net/~erik/tutorials/shortest_path/sp_3_2.png\" alt=\"Shortest Path Iteration 2 Step 2\" />\r\n\r\n<strong>Step 3.</strong>\r\nReturn to step 1\r\n\r\n<hr />\r\n<strong>Iteration 3</strong>\r\nAlmost done.\r\n<strong>Step 1</strong>\r\nChoose the cheapest temporary node value.  There is only one temporary node remaining, so we pick it and set it as permanent, set it as our current node, and set it's parent.\r\n<img src=\"http://vasir.net/~erik/tutorials/shortest_path/sp_4_1.png\" alt=\"Shortest Path Iteration 3 Step 1\" />\r\n\r\n<strong>Step 2.</strong>\r\nAssign costs.  There are no temporary nodes adjacent to Node B (there \u2013are- permanent nodes, but we don\u2019t check them).\r\n<strong>Step 3.</strong>\r\nReturn to step 1.\r\n<hr />\r\n<strong>Iteration 4</strong>\r\nStep 1. Choose the cheapest temporary node.  If none exists or c(x) = infinity, then stop.  There are no more temporary nodes and no nodes have values of infinity, so we\u2019re done.  Algorithm has finished, and we have our shortest path from A to B, but also from every node to every other node in the graph.  With such a small graph as this, it's not immediately obvious how powerful and useful this algorithim is.  \r\n\r\nSo, on to a more complicated graph now. \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n<hr /><hr />\r\n\r\n\r\n<br /><br />\r\nA is our starting point, and B is the ending point.  Now, we could just as well apply this to a 2d tile based game where A could represent an NPC and B could represent the NPC's desired destination.  \r\n\r\nIf you take a minute, you can probably find the least expensive route yourself.  As mentioned earlier, it's fairly trivial for us to come up with the answer, what we need to do is figure out how to convey the steps we take to more extensible steps that can be repeated by a computer for any graph.  For this graph, I won't be as thorough explaining every step, but the exact same process is applied.  Instead, I'll just provide an example of a slightly more complex graph and what it would look like using Dijkstra's algorithm.\r\n<hr />\r\n<strong>Step 0.</strong>\r\nTemporarily assign C(A) = 0 and C(x) = infinity for all other x.\r\nC(A) means the Cost of A\r\nC(x) means the current cost of getting to node x\r\n\r\nSo what's this mean? Well, our start point is A so c(A) = 0 means assign A a cost of 0 and set the cost of x for every other node to infinity.  Like the following\r\n<img src=\"http://vasir.net/~erik/tutorials/shortest_path/shortest_path2_1.PNG\" alt=\"Shortest path step 1\" />\r\nWe assign a cost of 0 to our starting node A and a cost of infinity to every other node.  As before, none of these costs are permanent yet.\r\n<hr />\r\n\r\n<strong>Step 1.</strong>\r\nThe node with the smallest temporary value is node A with a cost of 0.  Therefore, we're going to make it permanent - meaning c(x) and the parent will not change.\r\n<img src=\"http://vasir.net/~erik/tutorials/shortest_path/shortest_path2_1_a_selected.png\" alt=\"Permanent node\" />\r\nThe 0 will not change now.\r\n\r\nIf there are no temporary nodes, or if c(x) is infinity, the algorithm stops. Now, step 2.\r\n<hr />\r\n<strong>Step 2.</strong>\r\nBasically, we're going to look at all the nodes that are connected to the currently selected node and calculate the cost to get to them.  If the cost of y is less than what it previously was, it will change - this will be discussed soon.\r\n\r\nSo, let's first calculate the cost to get to the adjacent nodes. The cost is based on the value of the current node code plus the edge (node path) cost.  Right now, since this our first go, the cost our current node is at 0 since we haven't done any traversals.  \r\n\r\nSo, let's start to figure out the c(x), the node costs.  \r\n<img src=\"http://vasir.net/~erik/tutorials/shortest_path/shortest_path2_1_a_selected_3.png\" alt=\"Code of nodes\" />\r\nNotice the yellow arrows.  I'm using them to designate what node it got its cost from.  Here, since there is only one possible parent node, they all point to the same place. \r\n\r\n For the three nodes adjacent to A, we add the values of the edge and our current node (value of 0).  \r\nSo, the top node is 0 + 3 = 3, which is less than the current value (which is infinity), so we apply the value of 3 to the node.  Then, the middle node 0 + 7 = 7, also less than infinity. Finally the bottom node has a value of 0 + 5 = 5, which is less than infinity.  Therefore, the top node has a c(x) of 3, the middle a c(x) of 7, and the bottom a c(x) of 5.\r\n\r\n<hr />\r\n<strong>Step 3.</strong>\r\n<blockquote>Return to step 1</blockquote>\r\n<hr />\r\nAs before, we just iteratively go through graph applying the same steps.\r\n\r\nSo, walking through this - as step 1 says -\r\nWe find node x with the smallest temporary value of c(x).   So, out of the three temporary nodes with values 3, 5, and 7 that we just worked out, the smallest value is 3.  We then make this node permanent.\r\n<img src=\"http://vasir.net/~erik/tutorials/shortest_path/shortest_path3_2.png\" alt=\"Second permanent node\" />\r\n<hr />\r\n\r\nNow, this entire process just repeats itself over and over until there are no more temporary nodes.\r\n<img src=\"http://vasir.net/~erik/tutorials/shortest_path/shortest_path_final.png\" alt=\"Shortest path final\" />\r\n\r\nAnd we're done.  We have the shortest path not JUST from A to B, but from -any- node to -any- other node.  Pretty convenient.   \r\n<hr />\r\nHopefully that explains a bit about how Dijkstra's Algorithm works.  For game development, in particular overhead 2d tile based games, it is usually easier to implement Dijkstra's than A*, and not much worse performance wise.  \r\n\r\n<hr />\r\n<strong>Performance</strong>\r\nHow well does Dijsktra's algorithm perform?  Well, in terms of big O notion it is O(n^2), which is efficient. \r\nSpecifically, suppose G has n vertices and m edges. Going through the steps, Step 0 has time n. Step 1 is called, at the very most, n times. Finding the cheapest vertex takes at most n steps, so step 1 has an upper bound time of n^2.  In Step 2, each edge / node path is examined, at most, twice.  There, the upper bound time is 2m.\r\nSo, putting it all together, it's no worse than n^2 + 2m.  Again, in computer science terms, it is O(n^2) efficient; or: on the order of at most n^2 steps times a constant.\r\n\r\n<hr />\r\nBetter algorithms for NPC path finding certainly exist, but in general Dijkstra's is pretty good, and fairly easy to implement yourself.  \r\n\r\nA very good explanation of implementation in python can be found at (written by the guy who wrote python) <a href=\"http://www.python.org/doc/essays/graphs.html\">http://www.python.org/doc/essays/graphs.html </a>\r\n", "description": "This post will cover the basics of Dijksta's shortest path algorithm and how it can apply to path finding for game development. It is my opinion that understanding this algorithm will aid in understanding more complex AI algorithms, such as A*. This post is aimed more towards developers starting out in game development or those curious about Dijkstra's algorithm, but this will be a somewhat simplification of it and discuss mainly the concepts. ", "title": "Dijkstra's Algorithm - Shortest Path", "num_views": null, "tags": [], "post_date": "2010-01-17 14:29:18", "post_last_edit_date": null, "related_image": ""}}, {"pk": "openlayers-tutorial-part-1-introduction", "model": "vasir_blog.post", "fields": {"category": "openlayers", "content": "<div class='post_emphasis'>This is the first part in a series of OpenLayers tutorials.  The goal of this article is to provide an overview of OpenLayers, show what it can do, and begin working with the code.</div>\n<br /><strong>OpenLayers</strong> is an OpenSource, javascript based web mapping platform.\n<br />\n<br />OpenLayers easily supports a wide variety of various map sources - WMS, WFS, Google Maps, Microsoft's Bing, and many many more.  There are many built into tools, such as scale bars, overview maps, zoom bars, and many more; but OpenLayers also supports custom tools and allows for intricate configuration of existing ones.\n<br /><h5>Useful OpenLayers links</h5>\nOpenLayers - <a href=\"http://openlayers.org/\">http://openlayers.org</a>\n<br />OpenLayers API docs - <a href=\"http://dev.openlayers.org/apidocs\">http://dev.openlayers.org/apidocs</a>\n<br />OpenLayers Examples - <a href=\"http://openlayers.org/dev/examples\">http://openlayers.org/dev/examples</a>\n<br />\n<br /><div class=\"postEmptyLines\"></div>\n<br /><h5>OpenLayers Examples</h5>\nThe follow examples are pulled directly from http://openlayers.org/dev/examples\n<br />\n<br />Simple WMS map- http://openlayers.org/dev/examples/wms.html\n<br />Vector layer manipulation - http://openlayers.org/dev/examples/vector-formats.html\n<br />Google Map layer - http://openlayers.org/dev/examples/google.html\n<br />ArcGIS 9.3 REST API Interaction - http://openlayers.org/dev/examples/arcgis93rest.html\n<br />\n<br /><h2>Section 1 - First OpenLayers Map</h2>\n<br />We'll start with a basic map.  As OpenLayers is Javascript based, some working knowledge of how to program in Javascript is helpful, but expertise is by no means required.  First we'll take a look at the code then break it apart.\n<br />\n<br /><h5>Create and show a simple OpenLayers Map</h5>\n<em>Step 1</em>.  Create a folder called \"OLTutorial\".  If working in windows, this tutorial assumes you are placing the folder in your C:\\ drive ( so the full path would be C:\\OLTutorial )\n<br />\n<br /><em>Step 2. </em>Create a file called index.html (If you're on windows, you will probably need to disable the \"Hide extensions for known file types\" option.  <a href=\"http://www.wikihow.com/Disable-Hidden-File-Extensions-in-Windows-XP\" title=\"File Extension Hiding\" rel=\"nofollow\">How to disable hidden file extensions in windows xp</a>)\n<br />\n<br /><em>Step 3. </em> Input the following code\n<pre>\n&lt;html&gt;&lt;/script&gt;\n&lt;head&gt;&lt;/script&gt;\n&lt;script src=\"http://openlayers.org/api/OpenLayers.js\"&gt;&lt;/script&gt;&lt;/script&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;&lt;/script&gt;\n\nvar map;\n\nfunction init() {\nmap = new OpenLayers.Map('map');\nvar wms = new OpenLayers.Layer.WMS(\n\"OpenLayers WMS\",\n\"http://labs.metacarta.com/wms/vmap0\",\n{layers: 'basic'}\n);\n\nmap.addLayers([wms]);\nmap.zoomToMaxExtent();\n}\n\n&lt;/script&gt;&lt;/script&gt;\n&lt;/head&gt;&lt;/script&gt;\n\n&lt;body onload=\"init()\"&gt;&lt;/script&gt;\n&lt;div id=\"map\" style=\"width: 600px; height: 300px\"&gt;&lt;/script&gt;&lt;/div&gt;&lt;/script&gt;\n&lt;/body&gt;&lt;/script&gt;\n</pre>\n<em>Step 4. </em>Save the file then open it in your browser.\n<br />\n<br />You should see a very simple OpenLayers map.\n<h5>Explanation</h5>\nThe above OpenLayers example requires, essentially, only three things.\n<br />1. The location of the OpenLayers library\n<br />2. An HTML element (a div in this case) to hold the map\n<br />3. Javascript code to define the OpenLayers map and tell the map where to point to (again, in this case, a div)\n<br />\n<br />The location of the OpenLayers library in this example points to the OpenLayers.js file on the OpenLayers server.  You are free to download the full OpenLayers code and run it locally, pointing your <strong>script src=\"...\"</strong> equal to the location of the OpenLayers library on your harddrive.\n<br />\n<br />Let's look at the code line by line.<pre>\n&lt;html&gt;\n&lt;head&gt;\n&lt;script src=\"http://openlayers.org/api/OpenLayers.js\"&gt;&lt;/script&gt;\n</pre>\nLine 1 and 2 begin the HTML document and start the HEAD section of the index.html page.  The HEAD section is where our script code will reside.\n<br />Line 3 points to the OpenLayers library.  You <em>must</em> include the OpenLayers library before you try to use OpenLayers code.  The library contains the OpenLayers codebase - our code relies on the OpenLayers library, and without it our code would not work.\n<br /><pre>\n&lt;script type=\"text/javascript\"&gt;\n\tvar map;\n</pre>\n<em>Line 1.</em>  begins a new script tag and will hold our Javascript code to create the OpenLayers map.\n<br /><em>Line 2.</em>  Creates a global variable called \"map\" which will act as our map object, which will hold the OpenLayers map itself.\n<pre>\nfunction init() {\n\tmap = new OpenLayers.Map('map');\n\tvar wms = new OpenLayers.Layer.WMS(\n\t\t\"OpenLayers WMS\",\n\t\t\"http://labs.metacarta.com/wms/vmap0\",\n\t\t\t{layers: 'basic'}\n\t);\n</pre>\n><em>This <strong>init </strong>function will initialize the map, creating the OpenLayers map and assign a layer to it.</em>\n<br />\n<br /><em>Line 1.</em>  Create a function called init without passing anything into the function.\n<br /><em>Line 2.</em>  We're using the <em>map</em> object previously declared above.  Here, we're assigning the previously empty map variable to an OpenLayers map object via\n<br />\n<br />our code: <pre lang=\"Javascript\"> new OpenLayers.map('map');</pre>\n<br />general code: <pre lang=\"Javascript\"> new OpenLayers.map('ELEMENT NAME');</pre>\n\n<br /><em>new</em> creates a new OpenLayers <em>map</em> object.  We are passing in <strong>'map'</strong>, which is a string containing the name of element we want the OpenLayers map to appear in on the webpage.  In this example, we have a <em>div</em> element with the <em>id</em> of '<strong>map</strong>'. If this div's id was named something else, we would pass in the that div's id name instead of 'map'.\n<br />\n<br /><em>Line 3.</em>  Here we're creating a <strong>wms</strong> variable which will hold an OpenLayers layer object.  We call <em>new</em> to create an OpenLayers Layer WMS object.  For other layer types, such as WFS or Google Maps, the call is similar but WMS is replaced with the layer service.   The full list of support layers and how to call them can be found at http://dev.openlayers.org/releases/OpenLayers-2.8/doc/apidocs/files/OpenLayers/Layer-js.html.\n<br />\n<br />At the end of the line we have a opening parenthesis, which means that we're going to pass in some configuration stuff to this OpenLayers Layer object.\n<br />\n<br />It is important to keep in mind that the following configuration code will of course differ for you, but also that the configurations will be different for different layer services.  Consult the linked documentation files above for more detailed information.\n<br />\n<br /><em>Line 4.</em>  This line specifies an arbitrary title of the layer we're creating.\n<br />\n<br /><em>Line 5.</em>  This is the URL of the WMS service\n<br />\n<br /><em>Line 6.</em>  This is a dictionary of options the Layer object uses to generate the layer.  In this case, we want the \"basic\" layer from the layers of the WMS service we're calling.  You can call <strong>getCapabilities</strong> on the WMS url to view a list of layers the WMS service contains.  \n<div class='post_side_discussion'>\n    <div class='post_foot_note'>Note - we can specify as many WMS service layers we want to display in our OpenLayers Layer object.  For example, we could show three layers from the WMS service in a -single- OpenLayers Layer. </div> \n    <br />\n    <div class='post_guide'>\n    http://labs.metacarta.com/wms/vmap0?service=WMS&amp;request=getCapabilities\n    </div>The above URL calls getCapabilities for the WMS service we're using for this OpenLayers Layer.  If we look at that URL in our browser it will show us an XML file.  We can see what layers the WMS service has by looking for LAYER tags and looking at the NAME.  For example, this XML files contains\n    <pre>\n    ...\n\t    &lt;Layer&gt;\n\t\t    &lt;Name&gt;basic&lt;/Name&gt;\n    ...\n    </pre>\n    This 'basic' layer is the 'basic' layer we are referring to in <strong>{ layers: 'basic'} </strong>\n</div>\n<br />\nBack to the code...\n<pre>\n\tmap.addLayers([wms]);\n\tmap.zoomToMaxExtent();\n}\n</pre>\n<em>Line 1.</em>  We're adding the newly defined wms layer to the map here.  We can add multiple layers at once, but in this case we are just passing in one.  Regardless, the <em>addLayers</em> function expects a list of layers, so we must pass in a list via <strong>([</strong> layername<strong> ])</strong>\n<br />\n<br /><em>Line 2.</em>  After we've defined the map and added a layer to it, we need to tell the map what extent to display.  If we don't do this, the map doesn't know what to display.\n<br />So, in this case, we tell the map to zoom to the max extent - in other words, we are telling the map to show everything is can.\n<br />\n<br /><em>Line 3.</em>   Finishes the <strong>init</strong> function.\n<pre>\n&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body onload=\"init()\"&gt;\n&lt;div id=\"map\" style=\"width: 600px; height: 300px\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n</pre>\n<em>Line 1.</em>  Closes the script tag\n<br />\n<br /><em>Line 2.</em>   Closes the head tag\n<br />\n<br /><em>Line 4.</em>  Starts the body tag and call <strong>init()</strong> when the body has finished loading.\n<br />\n<br /><em>Line 5.</em>  Create a div with the id of <strong>map</strong> which the OpenLayers Map object will render to.  The div can be styled however you like.  We'll just make a 600 x 300px big map for this example though.\n<br />\n<br /><em>Line 6.</em>   Closes the body\n<h2>Conclusion</h2>\nThat's all that's required to get a map up and running!  There are a myriad of controls, layers, and options that we haven't even mentioned (yet!).  The next tutorial will discuss the OpenLayers Layer class more and touch briefly on controls.  Again, more examples and details can be found through the OpenLayers.com API or on the OpenLayers irc channel at <strong>irc.freenode.net</strong> in the <strong>#openlayers</strong> channel.\n<br /><br />\n<div class='grey_text align_right'>\nReady for the next post?  Continue to \n<a href='/blog/openlayers/openlayers-tutorial-part-2-layers/' \ntitle='OpenLayers Tutorial - Part 2 - Layer Class'>OpenLayers Tutorial - Part 2 - Layers</a>\n</div>\n", "description": "Tutorial Introducing OpenLayers, covering the basics of creating a map and populating it with a single layer.", "title": "OpenLayers Tutorial - Part 1 - Introduction", "num_views": null, "tags": ["openlayers_tutorial"], "post_date": "2009-10-29 13:39:40", "post_last_edit_date": null, "related_image": ""}}, {"pk": "openlayers-tutorial-part-2-layers", "model": "vasir_blog.post", "fields": {"category": "openlayers", "content": "Test", "description": "Test", "title": "OpenLayers Tutorial - Part 2 - Layers", "num_views": null, "tags": ["openlayers_tutorial"], "post_date": "2010-02-02 14:27:57", "post_last_edit_date": null, "related_image": ""}}]